x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.3}
  environment: &airflow-common-env
    # Core settings
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # Celery settings
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    # Crypto/auth secrets (must match across all services)
    AIRFLOW__CORE__FERNET_KEY: "oRPg8I5EzbaCXqdZAqR9tK_dR9u_LnUFR7eP1NMctY8="
    AIRFLOW__API_AUTH__JWT_SECRET: "o2vC6xyLbJ60w873iRfia8A=="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    # Airflow 3.x execution API endpoint
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: "http://airflow-apiserver:8080/execution/"
    # Use official entrypoint helpers
    _AIRFLOW_DB_MIGRATE: "true"
    _AIRFLOW_WWW_USER_CREATE: "true"
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
  env_file:
    - ./.env
  volumes:
    - ./data-pipeline/dags:/opt/airflow/dags
    - ./data-pipeline/logs:/opt/airflow/logs
    - ./data-pipeline/plugins:/opt/airflow/plugins
    - ./data-pipeline/spark_jobs:/opt/airflow/spark_jobs
    - ./data-pipeline/scripts:/opt/airflow/scripts
    - ./data-pipeline/data:/opt/airflow/data
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  restart: unless-stopped

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    command: bash -c "airflow db migrate"
    restart: "no"

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8793/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-apiserver:
        condition: service_healthy

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-apiserver:
        condition: service_healthy

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      airflow-apiserver:
        condition: service_healthy

  app:
    build:
      context: .
      dockerfile: app/Dockerfile
    env_file:
      - ./.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - USE_DUMMY=${USE_DUMMY:-false}
    volumes:
      - ./data-pipeline/data:/app/data
    ports:
      - "8000:8000"
    restart: unless-stopped

  ui:
    image: node:22
    working_dir: /ui
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0"
    environment:
      - VITE_BACKEND_URL=http://app:8000
      - NODE_ENV=development
    volumes:
      - ./ui:/ui
    ports:
      - "5173:5173"
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres-db-volume:
